/*
Copyright 2021 The KubeVela Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/napptive/kubevela-core-api/apis/core.oam.dev/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApplicationRevisionLister helps list ApplicationRevisions.
// All objects returned here must be treated as read-only.
type ApplicationRevisionLister interface {
	// List lists all ApplicationRevisions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ApplicationRevision, err error)
	// ApplicationRevisions returns an object that can list and get ApplicationRevisions.
	ApplicationRevisions(namespace string) ApplicationRevisionNamespaceLister
	ApplicationRevisionListerExpansion
}

// applicationRevisionLister implements the ApplicationRevisionLister interface.
type applicationRevisionLister struct {
	indexer cache.Indexer
}

// NewApplicationRevisionLister returns a new ApplicationRevisionLister.
func NewApplicationRevisionLister(indexer cache.Indexer) ApplicationRevisionLister {
	return &applicationRevisionLister{indexer: indexer}
}

// List lists all ApplicationRevisions in the indexer.
func (s *applicationRevisionLister) List(selector labels.Selector) (ret []*v1beta1.ApplicationRevision, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ApplicationRevision))
	})
	return ret, err
}

// ApplicationRevisions returns an object that can list and get ApplicationRevisions.
func (s *applicationRevisionLister) ApplicationRevisions(namespace string) ApplicationRevisionNamespaceLister {
	return applicationRevisionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApplicationRevisionNamespaceLister helps list and get ApplicationRevisions.
// All objects returned here must be treated as read-only.
type ApplicationRevisionNamespaceLister interface {
	// List lists all ApplicationRevisions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ApplicationRevision, err error)
	// Get retrieves the ApplicationRevision from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.ApplicationRevision, error)
	ApplicationRevisionNamespaceListerExpansion
}

// applicationRevisionNamespaceLister implements the ApplicationRevisionNamespaceLister
// interface.
type applicationRevisionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApplicationRevisions in the indexer for a given namespace.
func (s applicationRevisionNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.ApplicationRevision, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ApplicationRevision))
	})
	return ret, err
}

// Get retrieves the ApplicationRevision from the indexer for a given namespace and name.
func (s applicationRevisionNamespaceLister) Get(name string) (*v1beta1.ApplicationRevision, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("applicationrevision"), name)
	}
	return obj.(*v1beta1.ApplicationRevision), nil
}
