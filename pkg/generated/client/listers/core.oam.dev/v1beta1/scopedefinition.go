/*
Copyright 2021 The KubeVela Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/napptive/kubevela-core-api/apis/core.oam.dev/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ScopeDefinitionLister helps list ScopeDefinitions.
// All objects returned here must be treated as read-only.
type ScopeDefinitionLister interface {
	// List lists all ScopeDefinitions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ScopeDefinition, err error)
	// ScopeDefinitions returns an object that can list and get ScopeDefinitions.
	ScopeDefinitions(namespace string) ScopeDefinitionNamespaceLister
	ScopeDefinitionListerExpansion
}

// scopeDefinitionLister implements the ScopeDefinitionLister interface.
type scopeDefinitionLister struct {
	indexer cache.Indexer
}

// NewScopeDefinitionLister returns a new ScopeDefinitionLister.
func NewScopeDefinitionLister(indexer cache.Indexer) ScopeDefinitionLister {
	return &scopeDefinitionLister{indexer: indexer}
}

// List lists all ScopeDefinitions in the indexer.
func (s *scopeDefinitionLister) List(selector labels.Selector) (ret []*v1beta1.ScopeDefinition, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ScopeDefinition))
	})
	return ret, err
}

// ScopeDefinitions returns an object that can list and get ScopeDefinitions.
func (s *scopeDefinitionLister) ScopeDefinitions(namespace string) ScopeDefinitionNamespaceLister {
	return scopeDefinitionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ScopeDefinitionNamespaceLister helps list and get ScopeDefinitions.
// All objects returned here must be treated as read-only.
type ScopeDefinitionNamespaceLister interface {
	// List lists all ScopeDefinitions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ScopeDefinition, err error)
	// Get retrieves the ScopeDefinition from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.ScopeDefinition, error)
	ScopeDefinitionNamespaceListerExpansion
}

// scopeDefinitionNamespaceLister implements the ScopeDefinitionNamespaceLister
// interface.
type scopeDefinitionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ScopeDefinitions in the indexer for a given namespace.
func (s scopeDefinitionNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.ScopeDefinition, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ScopeDefinition))
	})
	return ret, err
}

// Get retrieves the ScopeDefinition from the indexer for a given namespace and name.
func (s scopeDefinitionNamespaceLister) Get(name string) (*v1beta1.ScopeDefinition, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("scopedefinition"), name)
	}
	return obj.(*v1beta1.ScopeDefinition), nil
}
